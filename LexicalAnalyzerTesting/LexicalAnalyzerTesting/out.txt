comment(// LexicalAnalyzerTesting.cpp : This file contains the 'main' function. Program execution begins and ends there.
)
comment(//
)
blank(
)
include(#include)
blank( )
leftBracket(<)
identifier(iostream)
rightBracket(>)
blank(
)
include(#include)
blank( )
leftBracket(<)
identifier(fstream)
rightBracket(>)
blank(
)
include(#include)
blank( )
string("tokenizer.hpp")
blank(
)
include(#include)
blank( )
string("regex_parser.hpp")
blank(
)
include(#include)
blank( )
string("dfa_builder.hpp")
blank(
)
include(#include)
blank( )
string("nfa_runner.hpp")
blank(
)
include(#include)
blank( )
string("nfa.hpp")
blank(
)
include(#include)
blank( )
leftBracket(<)
identifier(nfa_runner)
operator(.)
identifier(hpp)
rightBracket(>)
blank(

)
comment(//splits line by the delimiters and removes empty strings
)
identifier(std)
operator(::)
identifier(vector)
leftBracket(<)
identifier(std)
operator(::)
identifier(string)
rightBracket(>)
blank( )
identifier(split)
leftBracket(()
identifier(std)
operator(::)
identifier(string)
operator(&)
blank( )
identifier(line)
comma(,)
blank( )
identifier(std)
operator(::)
identifier(string)
blank( )
identifier(delims)
rightBracket())
blank( )
leftBracket({)
blank(
    )
identifier(std)
operator(::)
identifier(vector)
leftBracket(<)
identifier(std)
operator(::)
identifier(string)
rightBracket(>)
blank( )
identifier(tokens)
semicolon(;)
blank(
    )
identifier(size_t)
blank( )
identifier(pos)
blank( )
operator(=)
blank( )
number(0)
semicolon(;)
blank(
    )
identifier(size_t)
blank( )
identifier(next_pos)
blank( )
operator(=)
blank( )
number(0)
semicolon(;)
blank(
    )
identifier(while)
blank( )
leftBracket(()
identifier(next_pos)
blank( )
operator(!=)
blank( )
identifier(std)
operator(::)
identifier(string)
operator(::)
identifier(npos)
rightBracket())
blank( )
leftBracket({)
blank(
        )
identifier(next_pos)
blank( )
operator(=)
blank( )
identifier(line)
operator(.)
identifier(find_first_of)
leftBracket(()
identifier(delims)
comma(,)
blank( )
identifier(pos)
rightBracket())
semicolon(;)
blank(
        )
identifier(std)
operator(::)
identifier(string)
blank( )
identifier(substr)
blank( )
operator(=)
blank( )
identifier(line)
operator(.)
identifier(substr)
leftBracket(()
identifier(pos)
comma(,)
blank( )
identifier(next_pos)
blank( )
operator(-)
blank( )
identifier(pos)
rightBracket())
semicolon(;)
blank(
        )
identifier(if)
blank( )
leftBracket(()
identifier(substr)
blank( )
operator(!=)
blank( )
string("")
rightBracket())
blank(
            )
identifier(tokens)
operator(.)
identifier(push_back)
leftBracket(()
identifier(substr)
rightBracket())
semicolon(;)
blank(

        )
identifier(pos)
blank( )
operator(=)
blank( )
identifier(next_pos)
blank( )
operator(+)
blank( )
number(1)
semicolon(;)
blank(
    )
rightBracket(})
blank(
    )
identifier(return)
blank( )
identifier(tokens)
semicolon(;)
blank(
)
rightBracket(})
blank(

)
comment(//prints tree of the regexp and its dfa or an error and its position in the regexp
)
identifier(void)
blank( )
identifier(print_regexp_trees)
leftBracket(()
identifier(std)
operator(::)
identifier(istream)
operator(&)
blank( )
identifier(input)
comma(,)
blank( )
identifier(std)
operator(::)
identifier(ostream)
operator(&)
blank( )
identifier(output)
rightBracket())
blank( )
leftBracket({)
blank(
    )
identifier(std)
operator(::)
identifier(string)
blank( )
identifier(line)
semicolon(;)
blank(
    )
identifier(while)
blank( )
leftBracket(()
identifier(std)
operator(::)
identifier(getline)
leftBracket(()
identifier(input)
comma(,)
blank( )
identifier(line)
rightBracket())
rightBracket())
blank( )
leftBracket({)
blank(
        )
identifier(lex)
operator(::)
identifier(regex_parser)
blank( )
identifier(rp)
leftBracket(()
identifier(line)
comma(,)
blank( )
identifier(true)
rightBracket())
semicolon(;)
blank(
        )
identifier(try)
blank( )
leftBracket({)
blank(
            )
identifier(std)
operator(::)
identifier(cout)
blank( )
operator(<<)
blank( )
identifier(line)
blank( )
operator(<<)
blank( )
string("\n")
semicolon(;)
blank(
            )
identifier(lex)
operator(::)
identifier(nfa)
blank( )
identifier(nfa)
blank( )
operator(=)
blank( )
identifier(rp)
operator(.)
identifier(create_machine)
leftBracket(()
rightBracket())
semicolon(;)
blank(
            )
identifier(lex)
operator(::)
identifier(nfa_runner)
blank( )
identifier(nfa_runner)
leftBracket(()
identifier(nfa)
rightBracket())
semicolon(;)
blank(
            )
identifier(lex)
operator(::)
identifier(dfa_builder)
blank( )
identifier(dfa_builder)
semicolon(;)
blank(
            )
identifier(lex)
operator(::)
identifier(dfa)
blank( )
identifier(dfa)
blank( )
operator(=)
blank( )
identifier(dfa_builder)
operator(.)
identifier(create_dfa)
leftBracket(()
identifier(nfa_runner)
rightBracket())
semicolon(;)
blank(
            )
identifier(lex)
operator(::)
identifier(dfa_runner)
blank( )
identifier(dfa_runner)
leftBracket(()
identifier(dfa)
rightBracket())
semicolon(;)
blank(
            )
identifier(std)
operator(::)
identifier(cout)
blank( )
operator(<<)
blank( )
identifier(nfa)
operator(.)
identifier(expression_)
blank( )
operator(<<)
blank( )
string("\n")
semicolon(;)
blank(
            )
identifier(dfa)
operator(.)
identifier(print)
leftBracket(()
rightBracket())
semicolon(;)
blank(
        )
rightBracket(})
blank(
        )
identifier(catch)
blank( )
leftBracket(()
identifier(std)
operator(::)
identifier(invalid_argument)
blank( )
operator(&)
blank( )
identifier(e)
rightBracket())
blank( )
leftBracket({)
blank(
            )
identifier(std)
operator(::)
identifier(cout)
blank( )
operator(<<)
blank( )
identifier(e)
operator(.)
identifier(what)
leftBracket(()
rightBracket())
blank( )
operator(<<)
blank( )
string("\n")
semicolon(;)
blank(
        )
rightBracket(})
blank(
        )
identifier(std)
operator(::)
identifier(cout)
blank( )
operator(<<)
blank( )
string("\n\n")
semicolon(;)
blank(
    )
rightBracket(})
blank(
)
rightBracket(})
blank(

)
comment(//prints true if the string matches the regexp
)
identifier(void)
blank( )
identifier(match_regexps)
leftBracket(()
identifier(std)
operator(::)
identifier(istream)
operator(&)
blank( )
identifier(input)
comma(,)
blank( )
identifier(std)
operator(::)
identifier(ostream)
operator(&)
blank( )
identifier(output)
rightBracket())
blank( )
leftBracket({)
blank(
    )
identifier(std)
operator(::)
identifier(string)
blank( )
identifier(regexp)
semicolon(;)
blank(
    )
identifier(std)
operator(::)
identifier(string)
blank( )
identifier(text)
semicolon(;)
blank(
    )
identifier(while)
blank( )
leftBracket(()
identifier(std)
operator(::)
identifier(getline)
leftBracket(()
identifier(input)
comma(,)
blank( )
identifier(regexp)
rightBracket())
rightBracket())
blank( )
leftBracket({)
blank(
        )
identifier(std)
operator(::)
identifier(getline)
leftBracket(()
identifier(input)
comma(,)
blank( )
identifier(text)
rightBracket())
semicolon(;)
blank(
        )
identifier(lex)
operator(::)
identifier(regex_parser)
blank( )
identifier(rp)
leftBracket(()
identifier(regexp)
comma(,)
blank( )
identifier(false)
rightBracket())
semicolon(;)
blank(
        )
identifier(try)
blank( )
leftBracket({)
blank(
            )
comment(//create dfa for the regexp
)
blank(            )
identifier(lex)
operator(::)
identifier(nfa)
blank( )
identifier(nfa)
blank( )
operator(=)
blank( )
identifier(rp)
operator(.)
identifier(create_machine)
leftBracket(()
rightBracket())
semicolon(;)
blank(
            )
identifier(lex)
operator(::)
identifier(nfa_runner)
blank( )
identifier(nfa_runner)
leftBracket(()
identifier(nfa)
rightBracket())
semicolon(;)
blank(
            )
identifier(lex)
operator(::)
identifier(dfa_builder)
blank( )
identifier(dfa_builder)
semicolon(;)
blank(
            )
identifier(lex)
operator(::)
identifier(dfa)
blank( )
identifier(dfa)
blank( )
operator(=)
blank( )
identifier(dfa_builder)
operator(.)
identifier(create_dfa)
leftBracket(()
identifier(nfa_runner)
rightBracket())
semicolon(;)
blank(
            )
identifier(lex)
operator(::)
identifier(dfa_runner)
blank( )
identifier(dfa_runner)
leftBracket(()
identifier(dfa)
rightBracket())
semicolon(;)
blank(
            )
comment(//iterate text with dfa_runner
)
blank(            )
identifier(for)
blank( )
leftBracket(()
identifier(char)
blank( )
identifier(c)
blank( )
colon(:)
blank( )
identifier(text)
rightBracket())
blank( )
leftBracket({)
blank(
                )
identifier(dfa_runner)
operator(.)
identifier(move)
leftBracket(()
identifier(c)
rightBracket())
semicolon(;)
blank(
            )
rightBracket(})
blank(
            )
identifier(std)
operator(::)
identifier(cout)
blank( )
operator(<<)
blank( )
identifier(regexp)
blank( )
operator(<<)
blank( )
string(" ")
blank( )
operator(<<)
blank( )
identifier(text)
blank( )
operator(<<)
blank( )
string(" ")
blank( )
operator(<<)
blank( )
identifier(dfa_runner)
operator(.)
identifier(matches)
leftBracket(()
rightBracket())
blank( )
operator(<<)
blank( )
string("\n")
semicolon(;)
blank(
        )
rightBracket(})
blank(
        )
identifier(catch)
blank( )
leftBracket(()
identifier(std)
operator(::)
identifier(invalid_argument)
blank( )
operator(&)
blank( )
identifier(e)
rightBracket())
blank( )
leftBracket({)
blank(
            )
identifier(std)
operator(::)
identifier(cout)
blank( )
operator(<<)
blank( )
identifier(e)
operator(.)
identifier(what)
leftBracket(()
rightBracket())
blank( )
operator(<<)
blank( )
string("\n")
semicolon(;)
blank(
        )
rightBracket(})
blank(
        )
identifier(std)
operator(::)
identifier(cout)
blank( )
operator(<<)
blank( )
string("\n")
semicolon(;)
blank(
    )
rightBracket(})
blank(
)
rightBracket(})
blank(

)
comment(//prints the file split into tokens or error and its position
)
identifier(void)
blank( )
identifier(split_file)
leftBracket(()
identifier(std)
operator(::)
identifier(istream)
operator(&)
blank( )
identifier(regexps)
comma(,)
blank( )
identifier(std)
operator(::)
identifier(istream)
operator(&)
blank( )
identifier(text)
comma(,)
blank( )
identifier(std)
operator(::)
identifier(ostream)
operator(&)
blank( )
identifier(output)
rightBracket())
blank( )
leftBracket({)
blank(
    )
comment(//create tokenizer
)
blank(    )
identifier(std)
operator(::)
identifier(string)
blank( )
identifier(s)
leftBracket(()
identifier(std)
operator(::)
identifier(istreambuf_iterator)
leftBracket(<)
identifier(char)
rightBracket(>)
leftBracket(()
identifier(text)
rightBracket())
comma(,)
blank( )
leftBracket({)
rightBracket(})
rightBracket())
semicolon(;)
blank(
    )
identifier(lex)
operator(::)
identifier(tokenizer)
blank( )
identifier(tokenizer)
leftBracket(()
identifier(std)
operator(::)
identifier(move)
leftBracket(()
identifier(s)
rightBracket())
rightBracket())
semicolon(;)
blank(

    )
comment(//load regexps
)
blank(    )
identifier(std)
operator(::)
identifier(string)
blank( )
identifier(regexp)
semicolon(;)
blank(
    )
identifier(std)
operator(::)
identifier(string)
blank( )
identifier(name)
semicolon(;)
blank(
    )
identifier(while)
blank( )
leftBracket(()
identifier(std)
operator(::)
identifier(getline)
leftBracket(()
identifier(regexps)
comma(,)
blank( )
identifier(name)
rightBracket())
rightBracket())
blank( )
leftBracket({)
blank(
        )
identifier(std)
operator(::)
identifier(getline)
leftBracket(()
identifier(regexps)
comma(,)
blank( )
identifier(regexp)
rightBracket())
semicolon(;)
blank(
        )
identifier(try)
blank( )
leftBracket({)
blank(
            )
identifier(tokenizer)
operator(.)
identifier(add_token_type)
leftBracket(()
identifier(regexp)
comma(,)
blank( )
identifier(name)
rightBracket())
semicolon(;)
blank(
        )
rightBracket(})
blank(
        )
identifier(catch)
blank( )
leftBracket(()
identifier(std)
operator(::)
identifier(invalid_argument)
blank( )
operator(&)
blank( )
identifier(e)
rightBracket())
blank( )
leftBracket({)
blank(
            )
identifier(std)
operator(::)
identifier(cout)
blank( )
operator(<<)
blank( )
identifier(e)
operator(.)
identifier(what)
leftBracket(()
rightBracket())
blank( )
operator(<<)
blank( )
string("\n")
semicolon(;)
blank(
        )
rightBracket(})
blank(
    )
rightBracket(})
blank(

    )
identifier(std)
operator(::)
identifier(cout)
blank( )
operator(<<)
blank( )
string("Tokens:\n")
semicolon(;)
blank(
    )
comment(//tokenize input
)
blank(    )
identifier(while)
blank( )
leftBracket(()
identifier(tokenizer)
operator(.)
identifier(next_token)
leftBracket(()
rightBracket())
rightBracket())
blank( )
leftBracket({)
blank(
        )
identifier(auto)
blank( )
identifier(token)
blank( )
operator(=)
blank( )
identifier(tokenizer)
operator(.)
identifier(get_token)
leftBracket(()
rightBracket())
semicolon(;)
blank(
        )
identifier(token)
operator(.)
identifier(print)
leftBracket(()
identifier(output)
rightBracket())
semicolon(;)
blank(
    )
rightBracket(})
blank(
    )
identifier(std)
operator(::)
identifier(cout)
blank( )
operator(<<)
blank( )
string("\n")
semicolon(;)
blank(
)
rightBracket(})
blank(

)
identifier(int)
blank( )
identifier(main)
leftBracket(()
rightBracket())
blank(
)
leftBracket({)
blank(
    )
identifier(std)
operator(::)
identifier(cout)
blank( )
operator(<<)
blank( )
string("Hello World!\n")
semicolon(;)
blank(
    )
identifier(lex)
operator(::)
identifier(tokenizer)
blank( )
identifier(t)
leftBracket(()
string("string")
rightBracket())
semicolon(;)
blank(
    )
identifier(t)
operator(.)
identifier(get_token)
leftBracket(()
rightBracket())
operator(.)
identifier(print)
leftBracket(()
identifier(std)
operator(::)
identifier(cout)
rightBracket())
semicolon(;)
blank(
    )
identifier(lex)
operator(::)
identifier(token)
blank( )
identifier(ttt)
leftBracket(()
string("a")
comma(,)
blank( )
string("a")
rightBracket())
semicolon(;)
blank(
    )
identifier(lex)
operator(::)
identifier(dfa)
blank( )
identifier(d)
semicolon(;)
blank(
    )
identifier(std)
operator(::)
identifier(string)
blank( )
identifier(line)
semicolon(;)
blank(
    )
identifier(do)
blank( )
leftBracket({)
blank(
        )
identifier(std)
operator(::)
identifier(cout)
blank( )
operator(<<)
blank( )
string("Enter command:\n")
semicolon(;)
blank(
        )
identifier(std)
operator(::)
identifier(cout)
blank( )
operator(<<)
blank( )
string("\tShow regexp tree: t <regexp file>\n")
semicolon(;)
blank(
        )
identifier(std)
operator(::)
identifier(cout)
blank( )
operator(<<)
blank( )
string("\tMatch regexp: m <regexp + string file>\n")
semicolon(;)
blank(
        )
identifier(std)
operator(::)
identifier(cout)
blank( )
operator(<<)
blank( )
string("\tAnalyze file: a <regexp file> <text file> [<output file>]\n")
semicolon(;)
blank(
        )
identifier(std)
operator(::)
identifier(cout)
blank( )
operator(<<)
blank( )
string(">")
semicolon(;)
blank(
        )
identifier(std)
operator(::)
identifier(getline)
leftBracket(()
identifier(std)
operator(::)
identifier(cin)
comma(,)
blank( )
identifier(line)
rightBracket())
semicolon(;)
blank(
        )
identifier(auto)
blank( )
identifier(tokens)
blank( )
operator(=)
blank( )
identifier(split)
leftBracket(()
identifier(line)
comma(,)
blank( )
string(" ")
rightBracket())
semicolon(;)
blank(

        )
identifier(if)
blank( )
leftBracket(()
identifier(tokens)
operator(.)
identifier(size)
leftBracket(()
rightBracket())
blank( )
leftBracket(<)
blank( )
number(1)
blank( )
operator(||)
blank( )
identifier(tokens)
leftBracket([)
number(0)
rightBracket(])
operator(.)
identifier(size)
leftBracket(()
rightBracket())
blank( )
operator(!=)
blank( )
number(1)
rightBracket())
blank(
            )
identifier(continue)
semicolon(;)
blank(

        )
comment(//all commands have at least one input file
)
blank(        )
identifier(std)
operator(::)
identifier(ifstream)
blank( )
identifier(first_input)
semicolon(;)
blank(
        )
identifier(if)
blank( )
leftBracket(()
identifier(tokens)
operator(.)
identifier(size)
leftBracket(()
rightBracket())
blank( )
operator(>=)
blank( )
number(2)
rightBracket())
blank( )
leftBracket({)
blank(
            )
identifier(std)
operator(::)
identifier(string)
blank( )
identifier(file0)
blank( )
operator(=)
blank( )
identifier(tokens)
leftBracket([)
number(1)
rightBracket(])
blank( )
operator(+)
blank( )
string(".in")
semicolon(;)
blank(
            )
identifier(first_input)
operator(.)
identifier(open)
leftBracket(()
identifier(file0)
rightBracket())
semicolon(;)
blank(
            )
identifier(if)
blank( )
leftBracket(()
operator(!)
identifier(first_input)
operator(.)
identifier(is_open)
leftBracket(()
rightBracket())
rightBracket())
blank( )
leftBracket({)
blank(
                )
identifier(std)
operator(::)
identifier(cout)
blank( )
operator(<<)
blank( )
identifier(file0)
blank( )
operator(<<)
blank( )
string(" can't be opened")
semicolon(;)
blank(
                )
identifier(continue)
semicolon(;)
blank(
            )
rightBracket(})
blank(
        )
rightBracket(})
blank(
        )
identifier(else)
blank( )
leftBracket({)
blank(
            )
identifier(std)
operator(::)
identifier(cout)
blank( )
operator(<<)
blank( )
string("incorrect number of parameters")
semicolon(;)
blank(
            )
identifier(continue)
semicolon(;)
blank(
        )
rightBracket(})
blank(
        )
identifier(char)
blank( )
identifier(command)
blank( )
operator(=)
blank( )
identifier(tokens)
leftBracket([)
number(0)
rightBracket(])
leftBracket([)
number(0)
rightBracket(])
semicolon(;)
blank(
        )
identifier(switch)
blank( )
leftBracket(()
identifier(command)
rightBracket())
blank( )
leftBracket({)
blank(
        )
identifier(case)
blank( )
char('t)
char(':)
blank(
            )
identifier(print_regexp_trees)
leftBracket(()
identifier(first_input)
comma(,)
blank( )
identifier(std)
operator(::)
identifier(cout)
rightBracket())
semicolon(;)
blank(
            )
identifier(break)
semicolon(;)
blank(
        )
identifier(case)
blank( )
char('m)
char(':)
blank(
            )
identifier(match_regexps)
leftBracket(()
identifier(first_input)
comma(,)
blank( )
identifier(std)
operator(::)
identifier(cout)
rightBracket())
semicolon(;)
blank(
            )
identifier(break)
semicolon(;)
blank(
        )
identifier(case)
blank( )
char('a)
char(':)
blank(
            )
comment(//split file to tokens
)
blank(
            )
comment(//load the file to split
)
blank(            )
identifier(std)
operator(::)
identifier(ifstream)
blank( )
identifier(textInput)
semicolon(;)
blank(
            )
identifier(if)
blank( )
leftBracket(()
identifier(tokens)
operator(.)
identifier(size)
leftBracket(()
rightBracket())
blank( )
operator(>=)
blank( )
number(3)
rightBracket())
blank( )
leftBracket({)
blank(
                )
identifier(textInput)
operator(.)
identifier(open)
leftBracket(()
identifier(tokens)
leftBracket([)
number(2)
rightBracket(])
rightBracket())
semicolon(;)
blank(
                )
identifier(if)
blank( )
leftBracket(()
operator(!)
identifier(first_input)
operator(.)
identifier(is_open)
leftBracket(()
rightBracket())
rightBracket())
blank( )
leftBracket({)
blank(
                    )
identifier(std)
operator(::)
identifier(cout)
blank( )
operator(<<)
blank( )
string("The file ")
blank( )
operator(<<)
blank( )
identifier(tokens)
leftBracket([)
number(2)
rightBracket(])
blank( )
operator(<<)
blank( )
string(" can't be opened")
semicolon(;)
blank(
                    )
identifier(continue)
semicolon(;)
blank(
                )
rightBracket(})
blank(
            )
rightBracket(})
blank(
            )
identifier(else)
blank( )
leftBracket({)
blank(
                )
identifier(std)
operator(::)
identifier(cout)
blank( )
operator(<<)
blank( )
string("Incorrect number of parameters")
semicolon(;)
blank(
                )
identifier(continue)
semicolon(;)
blank(
            )
rightBracket(})
blank(

            )
identifier(if)
blank( )
leftBracket(()
identifier(tokens)
operator(.)
identifier(size)
leftBracket(()
rightBracket())
blank( )
operator(==)
blank( )
number(4)
rightBracket())
blank( )
leftBracket({)
blank(
                )
identifier(std)
operator(::)
identifier(ofstream)
blank( )
identifier(o_file)
leftBracket(()
identifier(tokens)
leftBracket([)
number(2)
rightBracket(])
rightBracket())
semicolon(;)
blank(
                )
identifier(if)
blank( )
leftBracket(()
operator(!)
identifier(o_file)
operator(.)
identifier(is_open)
leftBracket(()
rightBracket())
rightBracket())
blank( )
leftBracket({)
blank(
                    )
identifier(std)
operator(::)
identifier(cout)
blank( )
operator(<<)
blank( )
identifier(tokens)
leftBracket([)
number(2)
rightBracket(])
blank( )
operator(<<)
blank( )
string(" can't be opened")
semicolon(;)
blank(
                    )
identifier(continue)
semicolon(;)
blank(
                )
rightBracket(})
blank(

                )
identifier(split_file)
leftBracket(()
identifier(first_input)
comma(,)
blank( )
identifier(textInput)
comma(,)
blank( )
identifier(o_file)
rightBracket())
semicolon(;)
blank(
            )
rightBracket(})
blank(
            )
identifier(else)
blank( )
leftBracket({)
blank(
                )
identifier(split_file)
leftBracket(()
identifier(first_input)
comma(,)
blank( )
identifier(textInput)
comma(,)
blank( )
identifier(std)
operator(::)
identifier(cout)
rightBracket())
semicolon(;)
blank(
            )
rightBracket(})
blank(
            )
identifier(break)
semicolon(;)
blank(
        )
rightBracket(})
blank(

    )
rightBracket(})
blank( )
identifier(while)
blank( )
leftBracket(()
identifier(true)
rightBracket())
semicolon(;)
blank(
)
rightBracket(})
blank(

)
comment(// Run program: Ctrl + F5 or Debug > Start Without Debugging menu
)
comment(// Debug program: F5 or Debug > Start Debugging menu
)
blank(
)
comment(// Tips for Getting Started: 
)
comment(//   1. Use the Solution Explorer window to add/manage files
)
comment(//   2. Use the Team Explorer window to connect to source control
)
comment(//   3. Use the Output window to see build output and other messages
)
comment(//   4. Use the Error List window to view errors
)
comment(//   5. Go to Project > Add New Item to create new code files, or Project > Add Existing Item to add existing code files to the project
)
comment(//   6. In the future, to open this project again, go to File > Open > Project and select the .sln file
)
